@page "/tasks"

@using VL.Challenge.Blazor.Client.Components
@using VL.Challenge.Blazor.Client.Services;
@using VL.Challenge.Common.Tasks;
@using VL.Challenge.Domain.Entities;

@inject IUserApi _userApi;
@inject ITaskApi _taskApi;
@inject IUserContext _userContext;
@inject NavigationManager _navigationManager;
@inject IToaster _toaster;

<div class="container">
    <div class="row justify-content-between">

        <WeekCalendar></WeekCalendar>

        <div class="col-1">
            <h3>Tasks</h3>
        </div>
        <div class="col-1">
            <a class="btn btn-primary" href="/tasks/create">Create</a>
        </div>
    </div>
    @if (_agenda != default)
    {
        <div class="row">
            <div class="accordion">
                       @foreach (var group in _agenda)
                {
                    <MudDataGrid T="VLTask" ReadOnly="false" Items="group" Filterable="false" SortMode="@SortMode.None"
                             Groupable="false" EditMode="DataGridEditMode.Form" Bordered="true"
                             Dense="true" EditTrigger="DataGridEditTrigger.Manual">
                        <Columns>
                            <PropertyColumn Property="x => x.Id" />
                            <PropertyColumn Property="x => x.Description" />
                            <PropertyColumn Property="x => x.Date"  />
                            <PropertyColumn Property="x => x.StartTime"  />
                            <PropertyColumn Property="x => x.EndTime" />
                            <PropertyColumn Property="x => x.Subject"  />
                            <TemplateColumn Hidden="false" CellClass="d-flex justify-end">
                                <CellTemplate>
                                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                    
                }
            </div>
        </div>
    }
</div>

@code {
    private AgendaModel _agenda = default!;

    protected override async Task OnInitializedAsync()
    {
        if (_userContext.LoggingId == null)
        {
            _toaster.Add("Oops", "Login to create Tasks", UiColor.Warning);
            _navigationManager.NavigateTo("/");
            return;
        }
        //var agenda = await _userApi.GetAgenda(_userContext.LoggingId.Value);
        var agenda = await _userApi.GetData();
        if (agenda == null)
        {
            _toaster.Add("Oops", $"Agenda for user with id '{_userContext.LoggingId.Value}' not found", UiColor.Danger);
            _navigationManager.NavigateTo("/");
            return;
        }

        _agenda = agenda;
    }
    private List<string> _events = new();
    void StartedEditingItem(VLTask item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(VLTask item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(VLTask item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    private async Task Delete(int id)
    {
        if (await _taskApi.Delete(id))
        {
            _agenda.Remove(id);
            await InvokeAsync(StateHasChanged);
        }
    }
}
